
/*!
 * Connect - json
 * Copyright(c) 2010 Sencha Inc.
 * Copyright(c) 2011 TJ Holowaychuk
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

<<<<<<< HEAD
var utils = require('../utils');
var getBody = require('raw-body');
=======
var bodyParser = require('body-parser');
var deprecate = require('depd')('connect');
var merge = require('utils-merge');
>>>>>>> 2dbc38419e514781ab6a0fba52971ec3257fea64

/**
 * JSON:
 *
<<<<<<< HEAD
 * Parse JSON request bodies, providing the
 * parsed object as `req.body`.
 *
 * Options:
 *
 *   - `strict`  when `false` anything `JSON.parse()` accepts will be parsed
 *   - `reviver`  used as the second "reviver" argument for JSON.parse
 *   - `limit`  byte limit [1mb]
=======
 * See [body-parser](https://github.com/expressjs/body-parser)
>>>>>>> 2dbc38419e514781ab6a0fba52971ec3257fea64
 *
 * @param {Object} options
 * @return {Function}
 * @api public
 */

<<<<<<< HEAD
exports = module.exports = function(options){
  options = options || {};
  var strict = options.strict !== false;
  var verify = typeof options.verify === 'function' && options.verify;

  return function json(req, res, next) {
    if (req._body) return next();
    req.body = req.body || {};

    if (!utils.hasBody(req)) return next();

    // check Content-Type
    if (!exports.regexp.test(utils.mime(req))) return next();

    // flag as parsed
    req._body = true;

    // parse
    getBody(req, {
      limit: options.limit || '1mb',
      length: req.headers['content-length'],
      encoding: 'utf8'
    }, function (err, buf) {
      if (err) return next(err);

      if (verify) {
        try {
          verify(req, res, buf)
        } catch (err) {
          if (!err.status) err.status = 403;
          return next(err);
        }
      }

      var first = buf.trim()[0];

      if (0 == buf.length) {
        return next(utils.error(400, 'invalid json, empty body'));
      }

      if (strict && '{' != first && '[' != first) return next(utils.error(400, 'invalid json'));
      try {
        req.body = JSON.parse(buf, options.reviver);
      } catch (err){
        err.body = buf;
        err.status = 400;
        return next(err);
      }
      next();
    })
  };
};

exports.regexp = /^application\/([\w!#\$%&\*`\-\.\^~]*\+)?json$/i;

=======
module.exports = function json(options) {
  var opts = merge({
    limit: '1mb',
    type: ['application/json', 'application/*+json']
  }, options);

  // back-compat verify function
  if (typeof opts.verify === 'function') {
    deprecate('json.verify: use body-parser module for verify');
    opts.verify = convertVerify(opts.verify);
  }

  return bodyParser.json(opts);
};

/**
 * Convert old verify signature to body-parser version.
 *
 * @param {Function} verify
 * @return {Function}
 * @api private
 */

function convertVerify(verify) {
  return function (req, res, buf, encoding) {
    verify(req, res, buf.toString(encoding));
  };
}
>>>>>>> 2dbc38419e514781ab6a0fba52971ec3257fea64
